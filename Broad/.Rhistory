library(rstudioapi)
library(rstudioapi)
wd = dirname(rstudioapi::getSourceEditorContext()$path)
NCI_TPW_gep_treated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_treated.rds"))
NCI_TPW_gep_untreated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_untreated.rds"))
Metadata = read.delim(paste0(wd, "/Data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Cellline_Annotation = read.delim(paste0(wd, "/Data/cellline_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Drug_Annotation = read.delim(paste0(wd, "/Data/drug_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
CCLE_mutations = readRDS(paste0(wd, "/Data/CCLE_mutations.rds"))
CCLE_copynumber = readRDS(paste0(wd, "/Data/CCLE_copynumber.rds"))
CCLE_basalexpression = readRDS(paste0(wd, "/Data/CCLE_basalexpression.rds"))
NegLogGI50 = as.data.frame(readRDS(paste0(wd, "/Data/NegLogGI50.rds")))
Fold_Change = NCI_TPW_gep_treated - NCI_TPW_gep_untreated
Treated = data.frame(NCI_TPW_gep_treated)
Untreated = data.frame(NCI_TPW_gep_untreated)
Fold_Change <- data.frame(Fold_Change)
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
View(df.data)
pca <- prcomp(t(Fold_Change), scale = TRUE)
pca.data <- data.frame(sample = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2]
)
View(pca.data)
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, df))
View(metad.cl)
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, df[1,]))
View(Metadata)
df = rownames(colnames((Treated)))
pca.111 <- data.frame(sample = rownames(df),
pca.111 <- data.frame(sample = rownames(df))
View(pca.111)
df
df = data.frame(t(Treated))
View(pca)
View(df.data)
df = data.frame(t(Treated), rownames(colnames((Treated)))
)
df = data.frame(t(Treated), rownames(colnames(Treated)))
df = data.frame(t(Treated), rownames(colnames(t(Treated)))
)
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
View(df.data)
df.data1 <- data.frame(colnames(df))
View(df)
View(df.data)
View(df.data1)
library("dplyr", lib.loc="D:/Programme/R/R-3.5.1/library")
Lapatinib = select(Treated, contains("Lapa"))
View(Lapatinib)
LapatinibTre = select(Treated, contains("Lapa"))
LapatinibUntre = select(Untreated, contains("Lapa"))
LapatinibFold = select(Fold_Change, contains("Lapa"))
# Performing a k-means on Lapatinib
Fold_Change = scale(Fold_Change)
# Performing a k-means on Lapatinib
Fold_Change = data.frame(scale(Fold_Change)
)
LapatinibFold = select(Fold_Change, contains("Lapa"))
#Determining the number of clusters
topVarTreated = apply(LapatinibFold, 1, var)
# Using the most variable, thus informative genes
topVarFold75 = Fold_Change[topVarFold > quantile(topVarFold, probs = 0.75), ]
#Determining the number of clusters
topVarFold = apply(LapatinibFold, 1, var)
# Using the most variable, thus informative genes
topVarFold75 = Fold_Change[topVarFold > quantile(topVarFold, probs = 0.75), ]
wss = sapply(2:7, function(k) {
kmeans(x = t(topVarFold75), centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Treated")
D = dist(t(topVarFold75))
km = kmeans(x = t(topVarFold75), centers = 10, nstart = 10)
s = silhouette(km$cluster, D)
plot(s)
library("cluster", lib.loc="D:/Programme/R/R-3.5.1/library")
s = silhouette(km$cluster, D)
plot(s)
D = dist(t(topVarFold75))
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
s = silhouette(km$cluster, D)
plot(s)
km = kmeans(x = t(topVarTreated75), centers = 2, nstart = 10)
km$tot.withinss
km = kmeans(x = topVarTreated75, centers = 2, nstart = 10)
km$tot.withinss
km = kmeans(topVarTreated75, centers = 2, nstart = 10)
km$tot.withinss
km = kmeans(topVarFold75, centers = 2, nstart = 10)
km$tot.withinss
wss = sapply(2:7, function(k) {
kmeans(topVarFold75, centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Treated")
all.aml.exp = read.delim("https://www.dropbox.com/s/nbnl6c6vwrkbydz/ALLcancerdata.txt?dl=1",
header = T, check.names = F)
View(all.aml.exp)
topVarFold75 = LapatinibFold_Change[topVarFold > quantile(topVarFold, probs = 0.75), ]
dim(topVarTreated75)
topVarFold75 = LapatinibFold[topVarFold > quantile(topVarFold, probs = 0.75), ]
dim(topVarTreated75)
topVarFold75 = LapatinibFold[topVarFold > quantile(topVarFold, probs = 0.75), ]
dim(topVarTreated75)
dim(topVarFold75)
dim (topVarFold)
wss = sapply(2:7, function(k) {
kmeans(topVarFold75, centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Foldchange")
wss = sapply(2:7, function(k) {
kmeans(x =t(topVarFold75), centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Foldchange")
D = dist(t(topVarFold75))
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
s = silhouette(km$cluster, D)
plot(s)
wss = sapply(2:7, function(k) {
kmeans(x =t(topVarFold75), centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Foldchange")
wd = dirname(rstudioapi::getSourceEditorContext()$path)
NCI_TPW_gep_treated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_treated.rds"))
NCI_TPW_gep_untreated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_untreated.rds"))
Metadata = read.delim(paste0(wd, "/Data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Cellline_Annotation = read.delim(paste0(wd, "/Data/cellline_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Drug_Annotation = read.delim(paste0(wd, "/Data/drug_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
CCLE_mutations = readRDS(paste0(wd, "/Data/CCLE_mutations.rds"))
CCLE_copynumber = readRDS(paste0(wd, "/Data/CCLE_copynumber.rds"))
CCLE_basalexpression = readRDS(paste0(wd, "/Data/CCLE_basalexpression.rds"))
NegLogGI50 = as.data.frame(readRDS(paste0(wd, "/Data/NegLogGI50.rds")))
Fold_Change = NCI_TPW_gep_treated - NCI_TPW_gep_untreated
Treated = data.frame(NCI_TPW_gep_treated)
Untreated = data.frame(NCI_TPW_gep_untreated)
Fold_Change <- data.frame(Fold_Change)
library(rstudioapi)
wd = dirname(rstudioapi::getSourceEditorContext()$path)
NCI_TPW_gep_treated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_treated.rds"))
NCI_TPW_gep_untreated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_untreated.rds"))
Metadata = read.delim(paste0(wd, "/Data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Cellline_Annotation = read.delim(paste0(wd, "/Data/cellline_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Drug_Annotation = read.delim(paste0(wd, "/Data/drug_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
CCLE_mutations = readRDS(paste0(wd, "/Data/CCLE_mutations.rds"))
CCLE_copynumber = readRDS(paste0(wd, "/Data/CCLE_copynumber.rds"))
CCLE_basalexpression = readRDS(paste0(wd, "/Data/CCLE_basalexpression.rds"))
NegLogGI50 = as.data.frame(readRDS(paste0(wd, "/Data/NegLogGI50.rds")))
Fold_Change = NCI_TPW_gep_treated - NCI_TPW_gep_untreated
Treated = data.frame(NCI_TPW_gep_treated)
Untreated = data.frame(NCI_TPW_gep_untreated)
Fold_Change <- data.frame(Fold_Change)
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
View(df.data)
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df[,1]))
View(asdf)
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df))
View(asdf)
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df$sample))
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
View(asdf)
### cleaned up coloring
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, pca.data$sample)) ## adjust row length of metadata to pca.data
pca <- prcomp(t(Fold_Change), scale = TRUE)
pca.data <- data.frame(sample = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2]
)
### cleaned up coloring
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, pca.data$sample)) ## adjust row length of metadata to pca.data
View(metad.cl)
pca <- prcomp(t(Fold_Change), scale = TRUE)
# get name of sample with highest pc1 value
rownames(pca$x)[order(pca$x[,1], decreasing = TRUE)[1]]
pca.data <- data.frame(sample = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2]
)
pca.data
View(pca.data)
### cleaned up coloring
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, pca.data$sample)) ## adjust row length of metadata to pca.data
#PCA by Eva, created: May 23rd 2019, updated: June 2nd 2019
#capplying fold change to continous variables
Fold_Change = NCI_TPW_gep_treated - NCI_TPW_gep_untreated
Treated = data.frame(NCI_TPW_gep_treated)
Untreated = data.frame(NCI_TPW_gep_untreated)
pca <- prcomp(t(Fold_Change), scale = TRUE)
#transform df by function t() because prcomp expects rows to be samples, which is not the case for Fold_Change
#goal: show relation between related samples
plot(pca$x[,1], pca$x[,2])
# get name of sample with highest pc1 value
rownames(pca$x)[order(pca$x[,1], decreasing = TRUE)[1]]
pca.var <- pca$sdev^2  # sdev calculates variation each PC accounts for
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
# since percentages make more sense then normal variation values
# calculate % or variation, which is much more interesing
barplot(pca.var.per, main = "Scree plot", xlab = "Principal Components", ylab = "% variation")
plot(pca.var.per[1:10], type = "l", xlab = "Principal Components", ylab = "% variation")
plot(pca.var.per[1:8], type = "l", xlab = "Principal Components", ylab = "% variation")
plot(cumsum(pca.var.per[1:15]), type = "l", xlab = "Principal Components", ylab = "% variation")
pca.data <- data.frame(sample = rownames(pca$x),
x = pca$x[,1],
y = pca$x[,2]
)
pca.data
View(pca.data)
## get names of top 10 genes that contribute most to pc1
loading_scores_1 <- pca$rotation[,1]
loading_scores <- pca$rotation[,1:6]
ranked_pca <- sort(loading_scores[,1], decreasing = TRUE)
View(ranked_pca)
gene_score <- abs(loading_scores_1) ## sort magnitude
mean(gene_score)
max(gene_score)
min(gene_score)
gene_score_ranked <- sort(gene_score, decreasing = TRUE)
head(gene_score_ranked)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes # show names of top 10 genes
pca$rotation[top_10_genes,1] ##show scores and +/- sign
barplot(pca$rotation[, 1], horiz = TRUE, main = "PC1")
heatmap(var(Fold_Change))
### cleaned up coloring
metad.cl <- subset(Metadata, sample %in% intersect(Metadata$sample, pca.data$sample)) ## adjust row length of metadata to pca.data
cell.split <- split(pca.data, metad.cl$cell) #create cell vector for color annotation, but actually you don't need that
plot(pca$x[,1], pca$x[,2], col = metad.cl$drug, xlab = "PC1", ylab = "PC2", main =  "Colored by drug")
plot(pca$x[,1], pca$x[,2], col = metad.cl$dose, xlab = "PC1", ylab = "PC2", main = "Colored by dose")
plot(pca$x[,1], pca$x[,2], col = metad.cl$tissue, xlab = "PC1", ylab = "PC2", main = "Colored by tissue")
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
plot(pca$x[,1], pca$x[,2])
View(pca)
df = data.frame(t(Fold_Change))
df.data <- data.frame(sample = rownames(df))
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
asdf <- subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
df = data.frame(t(Treated))
df.data <- data.frame(sample = rownames(df))
colour = subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
df = (t(Treated))
df.data <- data.frame(sample = rownames(df))
colour = subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
Treated1 = readRDS(paste0(wd, "/Data/NCI_TPW_gep_treated.rds"))
df = data.frame(t(Treated1))
df.data <- data.frame(sample = rownames(df))
colour = subset(Metadata, sample %in% intersect(Metadata$sample, df.data$sample))
boxplot(Treated, border= colour, ylab = "Gene expression profile", main = "Teated genexpressionprofiles",xaxt ="n")
boxplot(Treated, border= colour, ylab = "Gene expression profile", main = "Teated genexpressionprofiles",xaxt ="n")
source('C:/Users/tobia/Desktop/colouer.R')
library(rstudioapi)
wd = dirname(rstudioapi::getSourceEditorContext()$path)
NCI_TPW_gep_treated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_treated.rds"))
NCI_TPW_gep_untreated = readRDS(paste0(wd, "/Data/NCI_TPW_gep_untreated.rds"))
Metadata = read.delim(paste0(wd, "/Data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Cellline_Annotation = read.delim(paste0(wd, "/Data/cellline_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
Drug_Annotation = read.delim(paste0(wd, "/Data/drug_annotation.tsv"), header = TRUE, sep = "\t", stringsAsFactors = TRUE)
CCLE_mutations = readRDS(paste0(wd, "/Data/CCLE_mutations.rds"))
CCLE_copynumber = readRDS(paste0(wd, "/Data/CCLE_copynumber.rds"))
CCLE_basalexpression = readRDS(paste0(wd, "/Data/CCLE_basalexpression.rds"))
NegLogGI50 = as.data.frame(readRDS(paste0(wd, "/Data/NegLogGI50.rds")))
Treated = data.frame(NCI_TPW_gep_treated)
Untreated = data.frame(NCI_TPW_gep_untreated)
#For scaling the data (taken from and analysed  in "Broad")
list = list(Treated,Untreated)
nlist = lapply(list,scale)
Treated = as.data.frame(nlist[[1]])
Untreated = as.data.frame(nlist[[2]])
Fold_Change = Treated - Untreated
Fold_Change <- data.frame(Fold_Change)
rm(NCI_TPW_gep_treated,NCI_TPW_gep_untreated,list,nlist)
library(cluster)
Fold_Change = data.frame(scale(Fold_Change))
LapatinibFold = select(Fold_Change, contains("Lapa"))
#Determining the number of clusters
topVarFold = apply(LapatinibFold, 1, var)
summary(topVarTreated)
# Using the most variable, thus informative genes
topVarFold75 = LapatinibFold[topVarFold > quantile(topVarFold, probs = 0.75), ]
dim(topVarFold75)
km = kmeans(x = t(topVarFold75), centers = 2, nstart = 10)
km$tot.withinss
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
km$tot.withinss
#running a loop for the best n (searching for "ellbow")
wss = sapply(2:7, function(k) {
kmeans(x =t(topVarFold75), centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Foldchange")
#no real ellbow :(
# Using the silhouett method
D = dist(t(topVarFold75))
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
s = silhouette(km$cluster, D)
plot(s)
library(cluster)
library(dplyr)
LapatinibFold = select(Fold_Change, contains("Lapa"))
#Determining the number of clusters
topVarFold = apply(LapatinibFold, 1, var)
summary(topVarTreated)
# Using the most variable, thus informative genes
topVarFold75 = LapatinibFold[topVarFold > quantile(topVarFold, probs = 0.75), ]
dim(topVarFold75)
km = kmeans(x = t(topVarFold75), centers = 2, nstart = 10)
km$tot.withinss
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
km$tot.withinss
#running a loop for the best n (searching for "ellbow")
wss = sapply(2:7, function(k) {
kmeans(x =t(topVarFold75), centers = k)$tot.withinss})
plot(2:7, wss, type = "b", pch = 19, xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares", main = "Determining the amount of clusters from Foldchange")
#no real ellbow :(
# Using the silhouett method
D = dist(t(topVarFold75))
km = kmeans(x = t(topVarFold75), centers = 3, nstart = 10)
s = silhouette(km$cluster, D)
plot(s)
